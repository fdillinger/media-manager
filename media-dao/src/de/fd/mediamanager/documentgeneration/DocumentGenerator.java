package de.fd.mediamanager.documentgeneration;

import java.io.File;
import java.io.IOException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.TransformerFactoryConfigurationError;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;

import org.w3c.dom.Document;
import org.xml.sax.SAXException;

/**
 * <p> Title: DocumentGenerator               </p>
 * <p> Description:                      </p>
 * <p> Copyright: Copyright (c) 2011     </p>
 * <p> Company: Frank DILLINGER AG       </p>
 *
 * @author fdillinger
 * @date 24 Mar 2011 09:43:45
 * @projectname 
 * @version $Id: $
 * 
 * <pre>
 * Changes
 * ===========================================================================
 * Date:   Name:        JIRA /Issue Id:       Description:
 * 
 * </pre>
 */

public class DocumentGenerator {

	//static String localPath = "R:\\java\\dev\\eclipse_workspaces\\default-3.6\\media\\media-dao\\src\\de\\fd\\mediamanager\\documentgeneration\\audioBook\\";
	static String localPath = "C:\\dev\\java\\workspace\\default-3.6\\media\\media-dao\\src\\de\\fd\\mediamanager\\documentgeneration\\audioBook\\";
	
	static String xsl = "audioBook.xsl";
	static String xml = "audioBook.xml";
	static String output = "audioBookDocument.xml";
	static File stylesheet = new File(localPath+xsl);
    static File datafile = new File(localPath+xml);
    static String outputFile = localPath+output;        
    static Document document;
    
    public static void main(String[] argv) {
        applyStyle();
    }

    private static void applyStyle() throws TransformerFactoryConfigurationError {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        //factory.setNamespaceAware(true);
        //factory.setValidating(true);
        try {
        	System.out.println("Start Audio Book document generation");
        	System.out.println("XSL File: " + xsl);
        	System.out.println("XML File: " + xml);
        	System.out.println("Output: "   + output);
        	
        	DocumentBuilder builder = factory.newDocumentBuilder();
            document = builder.parse(datafile);
            // Use a Transformer for output
            TransformerFactory tFactory = TransformerFactory.newInstance();
            StreamSource stylesource = new StreamSource(stylesheet);
            Transformer transformer = tFactory.newTransformer(stylesource);
            DOMSource source = new DOMSource(document);
            StreamResult result = new StreamResult(outputFile);
            transformer.transform(source, result);
            System.out.println("Audio Book document generation done");
        } 
        catch (TransformerConfigurationException tce) {
              // Error generated by the parser
             System.out.println("\n** Transformer Factory error");
             System.out.println("   " + tce.getMessage());
             // Use the contained exception, if any
             Throwable x = tce;
             if (tce.getException() != null) {
                x = tce.getException();
             }
             x.printStackTrace();
        } 
        catch (TransformerException te) 
        {
            // Error generated by the parser
            System.out.println("\n** Transformation error");
            System.out.println("   " + te.getMessage());
            // Use the contained exception, if any
            Throwable x = te;
            if (te.getException() != null) {
                x = te.getException();
            }
            x.printStackTrace();
        } 
        catch (SAXException sxe) {// Error generated by this application (or a parser-initialization error)
            Exception x = sxe;

            if (sxe.getException() != null) {
                x = sxe.getException();
            }
            x.printStackTrace();
        } catch (ParserConfigurationException pce) {// Parser with specified options can't be built
            pce.printStackTrace();
        } catch (IOException ioe) {// I/O error
            ioe.printStackTrace();
        }
    }
	
	
}
